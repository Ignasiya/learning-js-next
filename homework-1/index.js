/**
 * Задание 1
 * Используя Symbol.iterator, создайте объект "Музыкальная коллекция", который можно итерировать. 
 * Каждая итерация должна возвращать следующий альбом из коллекции.
 * Создайте объект musicCollection, который содержит массив альбомов и имеет свойство-символ Symbol.iterator.
 * {
 *   title: "Название альбома",
 *   artist: "Исполнитель",
 *   year: "Год выпуска"
 * }
 * Реализуйте кастомный итератор для объекта musicCollection. Итератор должен перебирать альбомы по порядку.
 * Используйте цикл for...of для перебора альбомов в музыкальной коллекции и вывода их на консоль в формате:
 Название альбома - Исполнитель (Год выпуска)
*/

const musicCollection = [
    { title: "Blooming", artist: "Steven Beddall", year: "2024" },
    { title: "Proof", artist: "BTS", year: "2022" },
    { title: "SOS", artist: "SZA", year: "2022" }
];

musicCollection[Symbol.iterator] = function () {
    return {
        current: 0,
        to: this.length,
        next() {
            return this.current < this.to ? { done: false, value: musicCollection[this.current++] } : { done: true };
        }
    }
}

for (let album of musicCollection) {
    console.log(`${album.title} - ${album.artist} (${album.year})`);
}

/**
 * Задание 2
 * Вы управляете рестораном, в котором работают разные повара, специализирующиеся на определенных блюдах. 
 * Клиенты приходят и делают заказы на разные блюда.
 * Необходимо создать систему управления этими заказами, которая позволит:
 * • Отслеживать, какой повар готовит какое блюдо.
 * • Записывать, какие блюда заказал каждый клиент.
 * Используйте коллекции Map для хранения блюд и их поваров, а также для хранения заказов каждого клиента. 
 * В качестве ключей для клиентов используйте объекты.
 * 
 * Повара и их специализации:
 * Виктор - специализация: Пицца.
 * Ольга - специализация: Суши.
 * Дмитрий - специализация: Десерты.
 * 
 * Блюда и их повара:
 * Пицца "Маргарита" - повар: Виктор.
 * Пицца "Пепперони" - повар: Виктор.
 * Суши "Филадельфия" - повар: Ольга.
 * Суши "Калифорния" - повар: Ольга.
 * Тирамису - повар: Дмитрий.
 * Чизкейк - повар: Дмитрий.
 * 
 * Заказы:
 * Клиент Алексей заказал: Пиццу "Пепперони" и Тирамису.
 * Клиент Мария заказала: Суши "Калифорния" и Пиццу "Маргарита".
 * Клиент Ирина заказала: Чизкейк.
*/

const chefs = new Map();
chefs.set("Виктор", "Пицца")
    .set("Ольга", "Суши")
    .set("Дмитрий", "Десерты");

const dishes = new Map();
dishes.set("Пицца \"Маргарита\"", "Виктор")
    .set("Пицца \"Пепперони\"", "Виктор")
    .set("Суши \"Филадельфия\"", "Ольга")
    .set("Суши \"Калифорния\"", "Ольга")
    .set("Тирамису", "Дмитрий")
    .set("Чизкейк", "Дмитрий");

const orders = new Map();

function placeOrder(client, ...dishes) {
    if (!orders.has(client)) {
        orders.set(client, []);
    }
    const clientOrders = orders.get(client);
    dishes.forEach(dish => {
        clientOrders.push(dish);
        console.log(`Заказ ${dish} готовит повар ${dishes.get(dish)}`);
    });
}

placeOrder({ name: "Алексей" }, "Пицца \"Пепперони\"", "Тирамису");
placeOrder({ name: "Мария" }, "Суши \"Калифорния\"", "Пицца \"Маргарита\"");
placeOrder({ name: "Ирина" }, "Чизкейк");

console.log("Заказы клиентов:");
for (const [client, clientOrders] of orders) {
    console.log(`Клиент ${client.name} заказал: ${clientOrders.join(", ")}`);
}